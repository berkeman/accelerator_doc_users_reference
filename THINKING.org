* DONE subjob.build(..., name=???)

* DONE urd.build(..., name=???)
* TODO varför finns ingen urd.list() ???
skall lägga till
* DONE urd.begin(..., update=???)

* TODO skall man kunna göra urd.build utan urd.begin???
* TODO Heter det "recall" när man hämtar byggda jobb???

* TODO automatarunner nämns under why_build i urd-kapitlet.  Hur skall det introduceras???


* DONE carls nya options

Values are defaults, types get None as default, RequiredOption(…) must be specified. (And OptionEnum without none_ok and no default must be specified.) Containers with a type in in the values default to empty containers (otherwise the specified values are the default contents).

options = dict(
    foo=4, # must be int, defaults to 4
    foo=int, # must be int, defaults to None
    foo=RequiredOption(int), # must be int, must be specified
    foo=RequiredOption(int, none_ok=True), # must be int or None, must be specified
    foo=None, # any type, defaults to None
    foo='bar', # must be string, defaults to 'bar'
    foo=OptionString, # must be str, must be specified and not empty
    foo=RequiredOption(str), # must be str, must be specified (but may be empty) 
    foo=OptionString('bar'), # must be string, must be specified and not empty, provides example
    foo=RequiredOption('bar'), # must be string, must be specified (but may be empty), provides example
    foo=OptionEnum('a b c'), # must be one of the strings 'a', 'b' or 'c', must be specified (since there is no default)
    foo=OptionEnum('a b c', none_ok=True), # value must be 'a', 'b', 'c' or None, defaults to None
    foo=OptionEnum('a b c').b, # must be one of the strings 'a', 'b' or 'c', defaults to 'b'
    foo={'bar': 'blutti'}, # must be {str: str} (or {}), defaults to dict provided
    foo={str: str}, # must be {str: str} or {}, defaults to {}
    foo=OptionDefault('bar': 'blutti'}, {}), # must be {str: str} or {}, defaults to {}, provides example
    foo={str: {str: int}}, # you can have dicts in dicts (etc) too.
    foo=[int], # lists and sets are fine too.
    foo=datetime, # most other types are unsupported, but date, time, datetime and timedelta are ok.
)

"Must be x" really means the constructor for type x must accept the value you provided.
So for example '3' is a valid int, but 'three' is not. (@@ This is buggy in lists, elsewhere?)

You can always specify None, except for OptionEnums or RequiredOptions without none_ok.
All containers can be specified as empty.

Complex types (like dicts, dicts of lists of dicts, ...) never enforce
specific keys, only types. ({'a': 'b'} is a valid value for {'foo': 'bar'})



* TODO Hur går man från JobWithFile till filnamn???
Carl skall titta på detta.


* Manualen använder python3
  
* nomenklatur
jobid är pekare på jobdir
jobdir bor i ett workdir

* legacy name mismatch
index, workdir/workspace osv finns i koden, även i
dokumentationsdelar.

* koduppstädning
config-template-filen skall städas

* lines vs rows					       :nomenclature:dataset:
det heter dataset.lines, men vi laser typiskt rows.
- Föredra "rows", men csvimport forttsätter heta lines,
  lite som att det är lines i en fil.


* .colums[key]
fyll i vad som ingår där, ÄVEN hur offsets fungerar om det är relevant.
(offsets=None om det inte är offsets!)
- offsets ingår inte i nuvarande dokumentation


* formatting
skippa suffix 'L' på intar och prefix 'u' på strängar för läsbarhet?
- inget problem i python3

* enkel- eller dubbelfnuttar??
- enkelfnuttar (python standard)

* under the hood
** DONE DON'T DO column_filename??
** datasets
print datasets.source.column_filename('locale')                                                             |#     min = minimum value in this dataset or None                                                                
# /ebay/workdirs/ab/neu4/neu4-4894_0/default/m.locale
# offsets = [0, 3343, 7415, 10911, 14593, 18473, 22149, 25638, 29297, 33166, 36959, 40758, 44168, 47832, 51243, 55061, 58858, 62613, 66313, 69951, 73669, 77212, 80705, 84797, 88414, 92159, 95875, 99540, 103108]
eller
# /ebay/workdirs/ab/neu/neu-14681_0/default/%s/locale
# offsets = None

** also datasets
# Going from a DatasetColumn to a filename is like this:
# jid, name = dc.location.split('/')
# resolve_jobid_filename(jid, '%s/%d/%s' % (name, sliceno, dc.name,))
#
# The dataset pickle is jid/name/dataset.pickle, so jid/default/dataset.pickle for the default dataset.


* options
** JobWithFile.extras är vaddå?  Unused?
- user defined argument  (tex plocka ut filnamn.read()['gurka'])

** OptionDefault??

* OBSOLETE REGLER FÖR OPTIONS
options = dict(
  foo=4, # must be int, defaults to 4
  foo=int, # must be int, must be specified (works for most types)
  foo=None, # any type, defaults to None
  foo='bar', # must be string, defaults to 'bar'
  foo=OptionString, # must be string, must be specified (same as foo=str)
  foo=OptionString('bar'), # must be string, must be specified, provides example
  foo=OptionEnum('a b c'), # must be one of the strings 'a', 'b' or 'c', must be specified
  foo=OptionEnum('a b c', none_ok=True), # mandatory, value must be 'a', 'b', 'c' or None.
  foo=OptionEnum('a b c').b, # must be one of the strings 'a', 'b' or 'c', defaults to 'b'

  foo={'bar': 'blutti'}, # defaults to dict provided
  foo=OptionDefault('bar': 'blutti'}, {}), # defaults to {}, still enforces {str: str} typing
  foo={str: str}, # mandatory dict of string to string
  foo={str: {str: int}}, # you can have dicts in dicts (etc) too. (mandatory as shown here)
  foo=[int], # lists and sets are fine too.
)

"Must be x" really means the constructor for type x must accept the value you provided.
So for example '3' is a valid int, but 'three' is not. (@@ This is buggy in lists, elsewhere?)

You can always specify None, except for OptionEnums without none_ok.
All containers can be specified as empty.

Complex types (like dicts, dicts of lists of dicts, ...) never enforce
specific keys, only types. ({'a': 'b'} is a valid value for {'foo': 'bar'})

OptionDefault defaults all otherwise mandatory values in the value to None.
jobids = ('foo', ['bar'],)
bar='a-0_0' -> jobids.bar = ['a-0_0']

* DONE skall man använda Dataset vid assignment i urd.build()???
DatasetWriter(previous=options.theonebefore)
Dataset('a-0_0')
Dataset('a-0_0/default')
Dataset('a-0_0/foo')
Dataset('a-0_0', 'foo')

* params
GLÖM INTE!
** what is params.link??
- inte dokumneteras, kanske bort
** varför params.params?
-
#params.params['csvimport'].options == options
params.params är legacy (Kanske Carl för del() precis innan anrop...)
anbefalles:  params.options  och  job_params(jobids.foo).options

** det finns ingen params.workspace??
Vi vill nog INTE exponera workspace
import g; g.WORKSPACE

* cleanup of pickle-files

* urd
.as_dep i urdresponse

** varför har urd.begin OCH urd.fininsh argumentet path required?
byxhängslen och livboj

* workdir or workspace?








* TRICKSNTIPS
** replace faster than strftime:

options = dict(
        length=-1,
        bincount=2,
        replace=dict(hour=0, minute=0, second=0),
)

datasets = ('source',)

def bin(ssid, n):
        return int(sha1(str(ssid)).hexdigest(), 16) % n

def analysis(sliceno):
        d = defaultdict(lambda: defaultdict(set))
        replace = options.replace
        n = options.bincount
        it = datasets.source.iterate_chain(
                sliceno,
                ['+first_sub_source', 'timestamp'],
                length=options.length,
                hashlabel='+first_sub_source',
        )
        for ssid, ts in it:
                d[ts.replace(**replace)][bin(ssid, n)].add(ssid)
        return {ts: Counter({b: len(s) for b, s in d.iteritems()}) for ts, d in d.iteritems()}

** x

* TODO dataset_type target types
typing:  vad blir det av number, number:int etc?  Performance?

* TODO shell-kommandot för att kolla in dataset??

* TODO minmax and all cool stuff in jobdir


* Carl [2017-03-10 fre]
missing:
"with status(...):" and ^T.
 
iterator:
s/iterate_datasets/Dataset.iterate/
s/iterate_datasetchain/ds.iterate_chain/

* merge_auto()
Finns inget om detta - titta i kod eller committmeddelande

* profilering
joblist/extras.profile?  Få exekveringstid på en joblista.

* m.-filer

* Vilka argument tar unicode:* egentligen?  unicodestrip:* är strict, replace, ignore

* finns number:float?
